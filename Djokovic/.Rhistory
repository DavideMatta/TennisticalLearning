library(tidyverse)
library(factoextra)
df = read.csv('../data/djo_fdf.csv')
summary(df)
sdf = df[, !(names(df) %in% c('Odd_Djo', 'Odd_Opp', 'Odd_Pred', 'Odd_Acc', 'Win', 'Rank_Djo', 'Rank_Opp'))]
summary(sdf)
pc_all = prcomp(sdf, scale = TRUE)
pc_all
summary(pc_all)
fviz_eig(pc_all, addlabels = TRUE, ylim = c(0, 50), main = "Scree Plot of PCA")
fviz_pca_var(pc_all, col.var = "black", col.quanti.sup = "red",
addlabels = TRUE, repel = TRUE, title = '')
fviz_pca_var(pc_all, col.var = "305041", col.quanti.sup = "red",
addlabels = TRUE, repel = TRUE, title = '')
fviz_pca_var(pc_all, col.var = "#305041", col.quanti.sup = "red",
addlabels = TRUE, repel = TRUE, title = '')
fviz_pca_var(pc_all, col.var = "#307341", col.quanti.sup = "red",
addlabels = TRUE, repel = TRUE, title = '')
fviz_pca_var(pc_all, col.var = "#305041", col.quanti.sup = "red",
addlabels = TRUE, repel = TRUE, title = '')
?fviz_pca_var
fviz_pca_var(pc_all, col.var = "black", col.quanti.sup = "red",
addlabels = TRUE, repel = TRUE, title = '')
fviz_pca_var(pc_all, col.var = "#305041", col.circle = "#305041",
col.quanti.sup = "red", fill.var = "#d4eb86",
addlabels = TRUE, repel = TRUE, title = '')
set.seed(1)
clusters = kmeans(sdf, 2)
clusters
plot (sdf, col = adjustcolor(clusters$cluster + 1, alpha.f = 0.1), main = '', pch = 20)
clus_plot = plot (sdf, col = adjustcolor(clusters$cluster + 1, alpha.f = 0.1), main = '', pch = 20)
clusters
clus_plot[1]
plot(sdf$Opp_Court_Perc, sdf$Opp_Set_Perc)
plot(sdf$Opp_Court_Perc, sdf$Opp_Set_Perc, xlim=c(1, 99))
plot(sdf$Opp_Court_Perc, sdf$Opp_Set_Perc, xlim=c(5, 95))
plot(sdf$Opp_Court_Perc, sdf$Opp_Set_Perc, xlim=c(5, 95), ylim=c(5,95))
plot(sdf$Opp_Court_Perc, sdf$Opp_Set_Perc, xlim=c(5, 95), ylim=c(5,95), adjustcolor(clusters$cluster + 1, alpha.f = 0.1))
plot(sdf$Opp_Court_Perc, sdf$Opp_Set_Perc, xlim=c(5, 95), ylim=c(5,95), col = adjustcolor(clusters$cluster + 1, alpha.f = 0.1))
plot(sdf$Opp_Court_Perc, sdf$Opp_Set_Perc, xlim=c(5, 95), ylim=c(5,95), col = adjustcolor(clusters$cluster + 1, alpha.f = 0.6))
plot(sdf$Opp_Court_Perc, sdf$Opp_Set_Perc, xlim=c(5, 95), ylim=c(5,95), col = adjustcolor(clusters$cluster + 1, alpha.f = 0.9))
color_vec = ifelse(clusters$cluster == 1, '#d4eb86', '#305041')
plot(sdf$Opp_Court_Perc, sdf$Opp_Set_Perc, xlim=c(5, 95), ylim=c(5,95), col = adjustcolor(color_vec, alpha.f = 0.9))
?plot
plot(sdf$Opp_Court_Perc, sdf$Opp_Set_Perc, xlim=c(5, 95), ylim=c(5,95),
col = adjustcolor(color_vec, alpha.f = 0.9),
xlab = 'Opp_Court_Perc', ylab = 'Opp_Set_Perc')
ggplot(data = sdf) + geom_point(x = Opp_Court_Perc, y = Opp_Set_Perc, col = color_vec)
ggplot(data = sdf) + geom_point(x = 'Opp_Court_Perc', y = 'Opp_Set_Perc', col = color_vec)
ggplot(data = sdf) + geom_point(x = sdf$Opp_Court_Perc, y = sdf$Opp_Set_Perc, col = color_vec)
ggplot(data = sdf) + geom_point(x = sdf$Opp_Court_Perc, y = sdf$Opp_Set_Perc)
4 + 5
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) + geom_point()
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) + geom_point(col = color_vec)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) +
geom_point(col = color_vec) + xlim(5, 95) + ylim(5, 95)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) +
geom_point(col = color_vec)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) +
geom_point(col = color_vec) + xlim(5, 95) + ylim(5, 95)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) +
geom_point(col = color_vec)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) +
geom_point(col = color_vec) + xlim(5, 95) + ylim(5, 95)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) +
geom_point(col = color_vec, alpha = 0.9) + xlim(5, 95) + ylim(5, 95)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) +
geom_point(col = color_vec, alpha = 0.5) + xlim(5, 95) + ylim(5, 95)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) +
geom_point(col = color_vec, alpha = 0.7) + xlim(5, 95) + ylim(5, 95)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) + theme_classic() +
geom_point(col = color_vec, alpha = 0.7) + xlim(5, 95) + ylim(5, 95)
plot(sdf$Opp_Court_Perc, sdf$Opp_Set_Perc, xlim=c(5, 95), ylim=c(5,95),
col = adjustcolor(color_vec, alpha.f = 0.9),
xlab = 'Opp_Court_Perc', ylab = 'Opp_Set_Perc')
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) + theme_classic() +
geom_point(col = color_vec, alpha = 0.7) + xlim(5, 95) + ylim(5, 95)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Win)) + theme_classic() +
geom_point(col = color_vec, alpha = 0.7) + xlim(5, 95) + ylim(5, 95)
ggplot(df, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) + theme_classic() +
geom_point(col = color_vec, alpha = 0.7) + xlim(5, 95) + ylim(5, 95)
ggplot(df, aes(x = Opp_Court_Perc, y = Win)) + theme_classic() +
geom_point(col = color_vec, alpha = 0.7) + xlim(5, 95) + ylim(5, 95)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) + theme_classic() +
geom_point(col = color_vec, alpha = 0.7) + xlim(5, 95) + ylim(5, 95)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) + theme_classic() +
geom_point(col = color_vec, alpha = 0.7) + xlim(5, 95) + ylim(5, 95) + legend()
?geom_point
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) + theme_classic() +
geom_point(col = color_vec, alpha = 0.7, show.legend = TRUE) + xlim(5, 95) + ylim(5, 95)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc, col = color_vec)) + theme_classic() +
geom_point(alpha = 0.7) + xlim(5, 95) + ylim(5, 95)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc, col = color_vec)) + theme_classic() +
geom_point(col = color_vec, alpha = 0.7) + xlim(5, 95) + ylim(5, 95)
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) + theme_classic() +
geom_point(col = color_vec, alpha = 0.7) + xlim(5, 95) + ylim(5, 95)  +
scale_color_manual(values = unique(color_vec),
labels = unique(color_vec),
name = "Colors")
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) + theme_classic() +
geom_point(aes(col = color_vec), alpha = 0.7) + xlim(5, 95) + ylim(5, 95)  +
scale_color_manual(values = unique(color_vec),
labels = unique(color_vec),
name = "Colors")
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) + theme_classic() +
geom_point(aes(col = color_vec), alpha = 0.7) + xlim(5, 95) + ylim(5, 95)  +
scale_color_manual(values = unique(color_vec), breaks = unique(color_vec),
labels = c("1", "2"),
name = "Colors")
clusters
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) + theme_classic() +
geom_point(aes(col = color_vec), alpha = 0.7) + xlim(5, 95) + ylim(5, 95)  +
scale_color_manual(values = unique(color_vec), breaks = unique(color_vec),
labels = c("1", "2"),
name = "Clusters") + theme(legend.position = "bottom")
ggplot(sdf, aes(x = Opp_Court_Perc, y = Opp_Set_Perc)) + theme_classic() +
geom_point(aes(col = color_vec), alpha = 0.7) + xlim(5, 95) + ylim(5, 95)  +
scale_color_manual(values = unique(color_vec), breaks = unique(color_vec),
labels = c("1", "2"),
name = "Clusters") + theme(legend.position = "top")
library(car)
library(performance)
library(leaps)
library(caret)
library(lmtest)
library(sandwich)
library(broom)
library(MASS)
test_accuracy = function(test_prediction){
pred = ifelse(test_prediction > 0.5, 1, 0)
true_pred = pred == test$Win
table(true_pred)[2]/(table(true_pred)[2] + table(true_pred)[1])
}
train_accuracy = function(test_prediction){
pred = ifelse(test_prediction > 0.5, 1, 0)
true_pred = pred == train$Win
table(true_pred)[2]/(table(true_pred)[2] + table(true_pred)[1])
}
df = read.csv('../data/med_fdf.csv')
summary(df)
sdf = df[, !(names(df) %in% c('Odd_Med', 'Odd_Opp', 'Odd_Acc'))]
summary(sdf)
set.seed(1)
training_index = createDataPartition(sdf$Win, p=0.7, list = FALSE)
train = sdf[training_index,]
test = sdf[-training_index,]
linreg = lm(Win ~ .  - Hard - Rank_Med - Rank_Opp - Odd_Pred, data = train)
summary(linreg)
vif(linreg)
check_model(linreg)
#heteroscedastic errors
robust_fit = coeftest(linreg, vcov = sandwich)
robust_fit
ols_test_predictions = predict.lm(linreg,newdata = test)
test_accuracy(ols_test_predictions)
ols_train_predictions = predict.lm(linreg,newdata = train)
train_accuracy(ols_train_predictions)
mean((test$Win - predict.lm(linreg,newdata = test))^2)
# test mse 0.1842193
mean((train$Win - predict.lm(linreg,newdata = train))^2)
#best subset selection
regfit.full=regsubsets(Win ~.  - Hard - Rank_Med - Rank_Opp - Odd_Pred,data=train, nvmax=14)
reg.summary=summary(regfit.full)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp")
plot(regfit.full,scale="Cp")
df = read.csv('../data/djo_fdf.csv')
summary(df)
sdf = df[, !(names(df) %in% c('Odd_Djo', 'Odd_Opp', 'Odd_Acc'))]
summary(sdf)
set.seed(1)
training_index = createDataPartition(sdf$Win, p=0.7, list = FALSE)
train = sdf[training_index,]
test = sdf[-training_index,]
linreg = lm(Win ~ .  - Hard - Rank_Djo - Rank_Opp - Odd_Pred, data = train)
summary(linreg)
vif(linreg)
check_model(linreg)
#heteroscedastic errors
robust_fit = coeftest(linreg, vcov = sandwich)
robust_fit
ols_test_predictions = predict.lm(linreg,newdata = test)
test_accuracy(ols_test_predictions)
ols_train_predictions = predict.lm(linreg,newdata = train)
train_accuracy(ols_train_predictions)
mean((test$Win - predict.lm(linreg,newdata = test))^2)
# test mse 0.1154418
mean((train$Win - predict.lm(linreg,newdata = train))^2)
#best subset selection
regfit.full=regsubsets(Win ~.  - Hard - Rank_Djo - Rank_Opp - Odd_Pred,data=train, nvmax=14)
reg.summary=summary(regfit.full)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp")
plot(regfit.full,scale="Cp")
df = read.csv('../data/ruud_fdf.csv')
summary(df)
sdf = df[, !(names(df) %in% c('Odd_Ruud', 'Odd_Opp', 'Odd_Acc'))]
summary(sdf)
set.seed(1)
training_index = createDataPartition(sdf$Win, p=0.7, list = FALSE)
train = sdf[training_index,]
test = sdf[-training_index,]
linreg = lm(Win ~ .  - Hard - Rank_Ruud - Rank_Opp - Odd_Pred, data = train)
summary(linreg)
vif(linreg)
check_model(linreg)
#heteroscedastic errors
robust_fit = coeftest(linreg, vcov = sandwich)
robust_fit
ols_test_predictions = predict.lm(linreg,newdata = test)
test_accuracy(ols_test_predictions)
ols_train_predictions = predict.lm(linreg,newdata = train)
train_accuracy(ols_train_predictions)
mean((test$Win - predict.lm(linreg,newdata = test))^2)
# test mse 0.2348946
mean((train$Win - predict.lm(linreg,newdata = train))^2)
#best subset selection
regfit.full=regsubsets(Win ~.  - Hard - Rank_Ruud - Rank_Opp - Odd_Pred,data=train, nvmax=14)
reg.summary=summary(regfit.full)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp")
plot(regfit.full,scale="Cp")
